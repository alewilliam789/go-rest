// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :execresult
INSERT INTO user (
  username,
  password,
  firstname,
  lastname,
  dob,
  city,
  state
) values (
  ?,?,?,?,?,?,?
)
`

type CreateUserParams struct {
	Username  string
	Password  string
	Firstname sql.NullString
	Lastname  sql.NullString
	Dob       sql.NullString
	City      sql.NullString
	State     sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser,
		arg.Username,
		arg.Password,
		arg.Firstname,
		arg.Lastname,
		arg.Dob,
		arg.City,
		arg.State,
	)
}

const deleteAuthor = `-- name: DeleteAuthor :exec
DELETE FROM user
WHERE id=?
`

func (q *Queries) DeleteAuthor(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteAuthor, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, username, password, firstname, lastname, dob, city, state FROM user
WHERE id = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Firstname,
		&i.Lastname,
		&i.Dob,
		&i.City,
		&i.State,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE user
SET password=?, firstname=?,lastname=?,dob=?,city=?,state=?
WHERE id = ?
`

type UpdateUserParams struct {
	Password  string
	Firstname sql.NullString
	Lastname  sql.NullString
	Dob       sql.NullString
	City      sql.NullString
	State     sql.NullString
	ID        int32
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.Password,
		arg.Firstname,
		arg.Lastname,
		arg.Dob,
		arg.City,
		arg.State,
		arg.ID,
	)
	return err
}
